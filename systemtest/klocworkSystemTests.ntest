# -*-Perl-*-

# maven-RunMaven.ntest -
#
# ECKlocwork
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/klocwork-common.ntest";

$::gProjectImported = 0;
$::gtestProjectName = 'KlocworkTestProject';

my $outcome = "";

sub importProject {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/klocworkSystemTests.xml",
               path  => "/projects/KlocworkTestProject",
               force => 1
             } ), "import runKlocworkBatchJob");
   
    assertOK($::N->getProcedure($::gtestProjectName, 'runKwinject'),
    "runKwinject procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'create_project'),
    "create_project procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'build_project'),
    "build_project procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'load_project'),
    "load_project procedure doesn't exist");
    
    assertOK($::N->getProcedure($::gtestProjectName, 'delete_project'),
    "delete_project procedure doesn't exist");
    
    $::gProjectImported = 1;
}


sub doSetup {

    if(! $::gProjectImported) {
        importProject();
    }
}
 
ntest "runKwinject", {}, sub {
      
    doSetup();
      
    # run test job
    my $xpath = $::N->runProcedure($::gtestProjectName, 
        {procedureName => "runKwinject",
            pollInterval  => '1',
            timeout => 600,
            actualParameter => []
        }); 
       
    # make sure it finished
    my $jobId = 0;
    my $status = "";
      
    assertOK($xpath, 'runProcedure with errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
   
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    
    # get the job details
    $xpath = $::N->getJobDetails($jobId);
    
    # get the value of the commands lines
    my $cmdKwinject = $xpath->findvalue("//property[propertyName='kwinjectCommandLine']/value");
          
    assertEq($cmdKwinject, "/usr/local/klocwork/bin/kwinject --debug /usr/local/klocwork/samples/testproject/compile.sh", "runkwinject command line doesn't match expected output");
};
  
ntest "build_project", {}, sub {
      
    doSetup();
      
    # run test job
     
    my $xpath = $::N->runProcedure($::gtestProjectName, 
            {procedureName => "build_project",
            pollInterval  => '1',
            timeout => 600,
                 actualParameter => [
                
                ]
    });
          
       
    # make sure it finished
    my $jobId = 0;
    my $status = "";
      
    assertOK($xpath, 'runProcedure with errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
  
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);
  
    # get the value of the commands lines
    my $cmdKwinject = $xpath->findvalue("//property[propertyName='kwbuildprojectCommandLine']/value");
      
    assertEq($cmdKwinject, "/usr/local/klocwork/bin/kwbuildproject -v -f /usr/local/klocwork/samples/testproject/kwinject.out --tables-directory /usr/local/klocwork/samples/testproject/tables", 
        "build_project command line doesn't match expected output");

};
  
ntest "create_project", {}, sub {
      
    doSetup();
      
    # run test job
     
    my $xpath = $::N->runProcedure($::gtestProjectName, 
            {procedureName => "create_project",
            pollInterval  => '1',
            timeout => 600,
                 actualParameter => [
                
                ]
    });
          
       
    # make sure it finished
    my $jobId = 0;
    my $status = "";
      
    assertOK($xpath, 'runProcedure with errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
  
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);
  
    # get the value of the commands lines
    my $cmdKwinject = $xpath->findvalue("//property[propertyName='kwadminCommandLine']/value");
      
    assertEq($cmdKwinject, "/usr/local/klocwork/bin/kwadmin --verbose create-project testproject --language c", 
        "create_project command line doesn't match expected output");

};

ntest "load_project", {}, sub {
      
    doSetup();
      
    # run test job
     
    my $xpath = $::N->runProcedure($::gtestProjectName, 
            {procedureName => "load_project",
            pollInterval  => '1',
            timeout => 600,
                 actualParameter => [
                
                ]
    });
          
       
    # make sure it finished
    my $jobId = 0;
    my $status = "";
      
    assertOK($xpath, 'runProcedure with errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
  
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);
  
    # get the value of the commands lines
    my $cmdKwinject = $xpath->findvalue("//property[propertyName='kwadminCommandLine']/value");
      
    assertEq($cmdKwinject, "/usr/local/klocwork/bin/kwadmin --verbose load testproject /usr/local/klocwork/samples/testproject/tables", 
        "load_project command line doesn't match expected output");

};

ntest "delete_project", {}, sub {
      
    doSetup();
      
    # run test job
     
    my $xpath = $::N->runProcedure($::gtestProjectName, 
            {procedureName => "delete_project",
            pollInterval  => '1',
            timeout => 600,
                 actualParameter => [
                
                ]
    });
          
       
    # make sure it finished
    my $jobId = 0;
    my $status = "";
      
    assertOK($xpath, 'runProcedure with errors');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
  
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);
  
    # get the value of the commands lines
    my $cmdKwinject = $xpath->findvalue("//property[propertyName='kwadminCommandLine']/value");
      
    assertEq($cmdKwinject, "/usr/local/klocwork/bin/kwadmin --verbose delete-project testproject", 
        "delete_project command line doesn't match expected output");

};
